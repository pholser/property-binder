                                   -----------------
                                   Examples of Usage
                                   -----------------

TL;DR

    * Create an interface whose methods represent keys in a properties file,
      map, resource bundle, or other source of configuration.

    * Annotate the methods of the interface as needed to designate
      property keys, default values, etc.

    * Create an instance of <<<PropertyBinder>>>, giving it the <<<Class>>>
      object of your interface.

    * Stamp out instances of your interface that are bound to specific
      configuration sources using <<<bind()>>>.

    []

Example

    Given this properties file:

+-------------------------------------------------------------------------------
@EXAMPLE_PROPERTIES_FILE@
+-------------------------------------------------------------------------------

    And this interface:

+-------------------------------------------------------------------------------
@EXAMPLE_PICA@
+-------------------------------------------------------------------------------

    Then the following tests should pass:

+-------------------------------------------------------------------------------
@EXAMPLE_TEST@
+-------------------------------------------------------------------------------

So?

    By presenting bits of configuration to your application as instances
    of a Java interface, you decouple the things that use the configuration
    from the means by which they're read/stored.  You thereby enable easier
    testing of those pieces of your application that use the configuration --
    supply mocks or stubs of the interface that answer different values
    for the configuration properties.

    By letting Property Binder create instances of those interfaces for you,
    you relieve your application of the grunt work of converting
    configuration values to sensible Java types, supplying default values,
    and so forth.

Other Sources of Configuration

    Property Binder admits properties files, resource bundles, and
    string-keyed maps out of the box. You can bind other types of
    string-keyed configuration by providing an implementation of
    interface <<<PropertySource>>>.

    If you have an XML config file such as this:

+-------------------------------------------------------------------------------
@EXAMPLE_XML_FILE@
+-------------------------------------------------------------------------------

    You might adapt it for Property Binder's use like so:

+-------------------------------------------------------------------------------
@EXAMPLE_XML_PICA@
+-------------------------------------------------------------------------------

+-------------------------------------------------------------------------------
@EXAMPLE_XML_TEST@
+-------------------------------------------------------------------------------

    You could even funnel a <<<Configuration>>> from
    {{{http://commons.apache.org/configuration/} Apache Commons Configuration}}
    into Property Binder:

+-------------------------------------------------------------------------------
@EXAMPLE_COMMONS_CONFIG@
+-------------------------------------------------------------------------------
